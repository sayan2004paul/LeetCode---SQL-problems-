175. Combine Two Tables :

Write a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.
Return the result table in any order.

Soln :

SELECT 
 p.firstName , p.lastName,a.city ,a.state
FROM 
 Person p 
  LEFT JOIN 
   Address a 
    ON p.personId=a.personId




176. Second Highest Salary :
Write a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).


Soln :

SELECT IFNULL((SELECT 
  DISTINCT salary  
  FROM 
   Employee 
    ORDER BY 
     salary DESC
      LIMIT 1 OFFSET 1),null) AS SecondHighestSalary


Optimised :

SELECT 
    MAX(salary) AS SecondHighestSalary
FROM (
    SELECT DISTINCT salary 
    FROM Employee 
    ORDER BY salary DESC 
    LIMIT 2
) AS temp
OFFSET 1;





177. Nth Highest Salary -Write a solution to find the nth highest distinct salary from the Employee table. If there are less than n distinct salaries, return null.



  

 CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT 
BEGIN
 SET N=N-1;
 RETURN (
SELECT 
 DISTINCT salary 
  FROM Employee 
   ORDER BY salary DESC 
    LIMIT 1 OFFSET N
    );
    END 


178. Rank Scores - Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.
Return the result table ordered by score in descending order.



SELECT 
 score , DENSE_RANK()OVER(ORDER BY score DESC) AS 'rank' 
   FROM 
    Scores 
