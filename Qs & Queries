175. Combine Two Tables :

Write a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.
Return the result table in any order.

Soln :

SELECT 
 p.firstName , p.lastName,a.city ,a.state
FROM 
 Person p 
  LEFT JOIN 
   Address a 
    ON p.personId=a.personId




176. Second Highest Salary :
Write a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).


Soln :

SELECT IFNULL((SELECT 
  DISTINCT salary  
  FROM 
   Employee 
    ORDER BY 
     salary DESC
      LIMIT 1 OFFSET 1),null) AS SecondHighestSalary


Optimised :

SELECT 
    MAX(salary) AS SecondHighestSalary
FROM (
    SELECT DISTINCT salary 
    FROM Employee 
    ORDER BY salary DESC 
    LIMIT 2
) AS temp
OFFSET 1;





177. Nth Highest Salary -Write a solution to find the nth highest distinct salary from the Employee table. If there are less than n distinct salaries, return null.



  

 CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT 
BEGIN
 SET N=N-1;
 RETURN (
SELECT 
 DISTINCT salary 
  FROM Employee 
   ORDER BY salary DESC 
    LIMIT 1 OFFSET N
    );
    END 


178. Rank Scores - Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.
Return the result table ordered by score in descending order.



SELECT 
 score , DENSE_RANK()OVER(ORDER BY score DESC) AS 'rank' 
   FROM 
    Scores 



180. Consecutive Numbers - Find all numbers that appear at least three times consecutively.

SELECT 
 DISTINCT a.num AS 'ConsecutiveNums'
 FROM 
  Logs a , Logs b , Logs c 
   WHERE 
    a.id - b.id=1 AND b.id-c.id=1 AND a.num=b.num AND c.num=b.num


OPTIMISED - 

SELECT 
DISTINCT a.num AS 'ConsecutiveNums'
 FROM 
  Logs a 
   JOIN 
    Logs b ON b.id-a.id=1
     JOIN Logs c ON c.id-b.id=1
      WHERE  
       a.num=b.num 
        AND c.num=b.num


181. Employees Earning More Than Their Managers - Write a solution to find the employees who earn more than their managers.

WITH CTE AS (SELECT 
 b.name AS 'emp',b.salary AS 'emp_sal' , a.name AS 'mang' , a.salary AS 'mng_sal'
FROM 
  Employee a 
   JOIN Employee b 
    ON b.managerId =a.id )

    SELECT 
     emp AS 'Employee'
      FROM CTE 
       WHERE 
        emp_sal>mng_sal


182. Duplicate Emails - Write a solution to report all the duplicate emails. Note that it's guaranteed that the email field is not NULL.

SELECT 
  email AS 'Email'
 FROM 
  (
   SELECT DISTINCT email,COUNT(email) AS cnt 
    FROM Person 
     GROUP BY 
      email
)  a

WHERE 
 cnt>1


optimised :

Select 
 email 
 FROM Person 
 GROUP BY email 
 HAVING COUNT(*)>1



183. Customers Who Never Order - Write a solution to find all customers who never order anything.

SELECT 
c.name AS 'Customers'
 FROM 
  Customers c 
   LEFT JOIN Orders o 
    ON c.id=o.customerId
     WHERE 
      o.customerId IS NULL


184. Department Highest Salary : Write a solution to find employees who have the highest salary in each of the departments.

# Write your MySQL query statement below
WITH CTE AS (SELECT 
 d.name AS 'dept' , e.name AS 'emp' , e.salary  
 FROM 
  Employee e 
   JOIN 
    Department d 
     ON e.departmentId=d.id),

     CTE1 AS (SELECT 
      dept , emp , salary , DENSE_RANK()OVER(PARTITION BY dept ORDER BY salary DESC) AS rnk 
      FROM CTE )
       
       SELECT 
        dept AS 'Department' , emp AS 'Employee',salary AS 'Salary'
         FROM CTE1 
          WHERE 
           rnk=1

optimised :

WITH Ranked AS (
    SELECT 
        d.name AS Department,
        e.name AS Employee,
        e.salary AS Salary,
        DENSE_RANK() OVER (PARTITION BY d.name ORDER BY e.salary DESC) AS rnk
    FROM Employee e
    JOIN Department d ON e.departmentId = d.id
)
SELECT Department, Employee, Salary
FROM Ranked
WHERE rnk = 1;



185. Department Top Three Salaries - A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.
Write a solution to find the employees who are high earners in each of the departments.

WITH CTE AS (SELECT d.name AS 'dept', e.name AS 'emp',  e.salary AS 'salary' , DENSE_RANK()OVER(PARTITION BY d.name ORDER BY  e.salary DESC ) AS 'rnk'
FROM 
 Employee e 
  JOIN 
   Department d 
    ON e.departmentId=d.id)

    SELECT 
     dept AS 'Department',emp AS 'Employee',salary AS 'Salary'
      FROM CTE 
       WHERE 
        rnk <=3








196. Delete Duplicate Emails - Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.
For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.
For Pandas users, please note that you are supposed to modify Person in place.
After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.



DELETE 
 FROM 
  Person 
   WHERE id NOT IN 
    (
        SELECT * FROM (

            SELECT MIN(id)
             FROM 
              Person 
               GROUP BY 
                email) a
        )
